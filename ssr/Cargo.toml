[package]
name = "estate-fe"
version = "0.1.0"
edition.workspace = true
publish.workspace = true

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
fake = { version = "2.9.2", features = ["derive"], optional = true }
cfg-if = "1.0.0"
console_log = "1"
log = "0.4"
axum = { version = "0.7", optional = true, features = ["macros"] }
console_error_panic_hook = "0.1"
leptos = { version = "0.6", features = ["nightly"] }
leptos_axum = { version = "0.6", optional = true }
leptos_meta = { version = "0.6", features = ["nightly"] }
leptos_router = { version = "0.6", features = ["nightly"] }
leptos_icons = "0.3.1"
icondata = "0.4.0"
icondata_core = "0.1.0"

tokio = { version = "1", features = [
    "rt-multi-thread",
    "time",
], optional = true }
openidconnect = { version = "3.5", optional = true}
jsonwebtoken = "9.3.1"
tower = { workspace = true, features = ["util"], optional = true }
tower-http = { workspace = true, features = [
    "fs",
    "cors",
    "trace",
], optional = true }
tower-layer = { workspace = true, optional = true }
regex = { version = "1.11.1" }
# tower = { version = "0.4", features = ["util"], optional = true }
# tower-http = { version = "0.5", features = ["fs","cors","trace"], optional = true }
# tower-layer = {version =  "0.3.2", optional = true}
# tower_governor = { version = "0.3", optional = true, default-features = false, features = ["axum", "tracing"]}
# tower-service =  {version =  "0.3.2", optional = true}
wasm-bindgen = "0.2.100"
thiserror = { workspace = true }
serde = { workspace = true }
serde_json = { workspace = true }

tracing = { workspace = true, optional = true }
tracing-subscriber = { workspace = true, optional = true, features = [
    "std",
    "env-filter",
] }

tracing-appender = { workspace = true, optional = true }
http = {workspace = true}
# http = "1"
axum-extra = { version = "0.9.3", optional = true, features = [
    "cookie",
    "cookie-signed",
    "cookie-private",
    "typed-header"
] }
simple_logger = "5.0.0"
web-sys = { version = "0.3.70", features = [
    "Element",
    "Event",
    "EventTarget",
    "Document",
    "Window",
    "HtmlElement",
] }
leptos-use = { version = "0.13.11", features = [
    "use_timestamp",
    "use_timeout_fn",
    "use_breakpoints",
    "use_scroll",
    "use_throttle_fn",
] }
chrono = { version = "0.4.39", features = ["serde"] }
anyhow = { workspace = true }
derive_more = { version = "1.0.0", features = ["display"] }
# error-stack = "0.5.0"
accounting = "0.2.0"
# reqwest = { version = "0.12.8", default-features = false, features = ["json", "gzip", "deflate", "http2"] }
reqwest = { version = "0.12.8", default-features = false, features = [
    "json",
    "http2",
    "gzip",
    "deflate",
] }
k256 = { version = "0.13.4", default-features = false, features = [
    "std",
    "jwk",
] }
stringreader = "0.1.1"
ic-agent = { version = "0.41.0", features = ["wasm-bindgen", "pem"] }
ic-base-types = { git = "https://github.com/dfinity/ic", rev = "tags/release-2024-05-29_23-02-base" }
# dotenvy = "0.15.7"
# dotenvy_macro = "0.15.7"
candid = "0.10.10"
gloo-net = { version = "0.6" }
gloo-utils = { version = "0.2.0", features = ["serde"] }
base64 = "0.22"


flate2 = "1.0.34"
serde_path_to_error = "0.1.16"
leptos_query = { version = "0.5.3", features = ["local_storage", "indexed_db"] }
leptos_query_devtools = { version = "0.1.3", features = [
    "wasm-bindgen",
    "web-sys",
    "js-sys",
] }
better-panic = "0.3.0"
wasm-bindgen-futures = "0.4"
rand = "0.8.5"
codee = { version = "0.2.0", features = ["json_serde_wasm", "json_serde"] }
futures = "0.3.31"
colored = { version = "2.1.0" }
async-trait = "0.1.85"
hmac = { version = "0.12.1", optional = true }
sha2 = { version = "0.10.8", optional = true }
hex = { version = "0.4.3" }
# sse booking 
async-stream = { version = "0.3", optional = true }
tokio-stream = { version = "0.1", optional = true }
once_cell = { version = "1.20.3" }
lazy_static = "1.5.0"
broadcaster = { version = "1.0.0", optional = true }
circular-buffer = "0.1.7"
sitewriter = "1.0"
# yral-types = { git = "https://github.com/dolr-ai/yral-common.git", branch = "master" }
# ed25519-consensus = "2.1"
# ic-auth-client ={ git = "https://github.com/prakash-estate/ic-auth-client-rs.git", branch = "ic-agent-0.41"}
# ic-auth-client = "0.3.1"
# for uuidv7
coarsetime = { version = "0.1", optional = true }
getrandom = { version = "0.3.3", optional = true, features = ["wasm_js"] }

# bg jobs - now handled by bg-ractor crate
# ractor = { workspace = true , optional = true }
# testing
test-log = { version = "0.2.17", features = ["trace"], optional = true }
dashmap = { version = "6.1.0", optional = true }
serde_urlencoded = "0.7.1"
url = "2.5"
# linear-map = "1.2.0"

# OAuth2 and authentication dependencies
oauth2 = { version = "4.4", optional = true }
uuid = { version = "1.0", features = ["v4", "serde"], optional = true }
tower-cookies = { version = "0.10", optional = true }
# jsonwebtoken = { version = "9.0", optional = true }

# for the futures spawned from leptos
send_wrapper = { version = "0.6.0", features = ["futures"] }

## workspace crates 
telemetry_axum = { workspace = true, optional = true }


# bg-ractor as optional dependency (only for SSR builds)
bg-ractor = { path = "../bg-ractor", optional = true }



[build-dependencies]
serde = { version = "1.0", features = ["derive"] }
candid_parser = "0.1.1"
serde_json = "1.0.110"
convert_case = "0.6.0"
anyhow = "1.0.86"
# sitewriter = "1.0"
# chrono = {version =  "0.4.39", features = ["serde"]}


[features]

hydrate = [
    "leptos/hydrate",
    "leptos_meta/hydrate",
    "leptos_router/hydrate",
    "leptos_query/hydrate",
    "leptos_query_devtools/csr",
    "reqwest/native-tls",
    "leptos-use/use_timestamp",
    # "dep:wasm-bindgen",
    # "dep:reqwest"
    # "dep:dotenv"
    # , "reqwest/gzip"
]
ssr = [
    "dep:telemetry_axum",
    "dep:axum",
    "dep:axum-extra",
    "dep:tokio",
    "dep:tower",
    "dep:tower-http",
    "dep:openidconnect",
    # "dep:tower_governor",
    "dep:leptos_axum",
    "leptos/ssr",
    "leptos_meta/ssr",
    "leptos_query/ssr",
    "leptos_router/ssr",
    "dep:tracing",
    "dep:tracing-subscriber",
    "dep:tower-layer",
    "reqwest/rustls-tls",
    "leptos-use/use_timestamp",
    "leptos-use/ssr",
    "leptos-use/axum",
    "dep:hmac",
    "dep:sha2",
    # "dep:once_cell",
    "dep:broadcaster",
    "dep:async-stream",
    "dep:tokio-stream",
    "dep:getrandom",
    "dep:coarsetime",
    "dep:dashmap",
    "dep:oauth2",
    "dep:uuid",
    "dep:tower-cookies",
    "dep:bg-ractor", # cities polling background jobs
    # "dep:ractor", # moved to bg-ractor crate
    # "dep:jsonwebtoken",
    # "dep:colored"
    # "dep:dotenvy"
    # "reqwest/gzip"
    # "dep:reqwest"
]

# for capturing certain events / logs - turn on debug_log flag
debug_log = []
# for the DebugDisplay component 
debug_display = []

# for generating logfiles in log/ directory from captured logs 
debug_log_file = ["dep:tracing-appender"]

local-consts = []
local-lib = ["local-consts", "hydrate", "debug_log"]
local-bin = ["ssr", "local-consts", "debug_log", "debug_log_file"]

# local-lib-with-debug-display = ["local-lib", "debug_display" ]
# local-bin-with-debug-display = ["local-bin","debug_display"]

# mocking features 
mock-provab = ["dep:fake"]
mock-pipeline = []
# this feature flag simulates the failure of block_room api
mock-block-room-fail = ["mock-provab"]

local-lib-with-mock = ["local-lib", "mock-provab", "mock-pipeline"]
local-bin-with-mock = ["local-bin", "mock-provab", "mock-pipeline"]

# analytics features 
ga4 = []

# release features - staging 
stage-consts = []
release-lib = ["stage-consts", "hydrate", "debug_log", "ga4"]
release-bin = ["stage-consts", "ssr", "debug_log", "ga4"]

# release features - production 
prod-consts = []
release-lib-prod = ["prod-consts", "hydrate", "ga4"]
release-bin-prod = ["prod-consts", "ssr", "ga4"]



[package.metadata.leptos]
# The name used by wasm-bindgen/cargo-leptos for the JS/WASM bundle. Defaults to the crate name
output-name = "estate-fe"

# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site"

# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg
site-pkg-dir = "pkg"

# [Optional] The source CSS file. If it ends with .sass or .scss then it will be compiled by dart-sass into CSS. The CSS is optimized by Lightning CSS before being written to <site-root>/<site-pkg>/app.css
# style-file = "style/main.scss"

# The tailwind input file.
tailwind-input-file = "style/input.css"

# The tailwind config file.
tailwind-config-file = "tailwind.config.js"


# Assets source dir. All files found here will be copied and synchronized to site-root.
# The assets-dir cannot have a sub directory with the same name/path as site-pkg-dir.
#
# Optional. Env: LEPTOS_ASSETS_DIR.
assets-dir = "public"

# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
site-addr = "127.0.0.1:3000"

# The port to use for automatic reload monitoring
reload-port = 3001

# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
#   [Windows] for non-WSL use "npx.cmd playwright test"
#   This binary name can be checked in Powershell with Get-Command npx
end2end-cmd = "npx playwright test"
end2end-dir = "end2end"

#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"

# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"

# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = ["ssr"]

# If the --no-default-features flag should be used when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = ["hydrate"]

# If the --no-default-features flag should be used when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false

# The profile to use for the lib target when compiling for release
#
# Optional. Defaults to "release".
lib-profile-release = "wasm-release"
